//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-------------------- login into droplet---------------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ssh root@157.230.106.16
O168mzrMMPIWjEc

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-------------------- Gerate ssh key for git cloning ---------------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ssh-keygen -t rsa -b 4096 -C "esbonmigiro@gmail.com"
cat /root/.ssh/id_rsa.pub

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-------------------- installing node and npm---------------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

sudo apt update
sudo apt install nodejs npm

node -v
npm -v

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--------------------setting react---------------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
npm install -g serve
serve -s build -l 3000

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--------------------setting nginx for---------------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  sudo apt update
  sudo apt install nginx
  sudo systemctl start nginx
  
  
  
cd /etc/nginx/sites-enabled
sudo rm default
sudo touch frontend_config

sudo vim /etc/nginx/sites-enabled/frontend_config

server {
    listen 3000;
    server_name 157.230.106.16;
    root /root/react/chess_react/build/;
    index index.html; 
    location / {
        try_files $uri $uri/ /index.html;
    }
}

sudo nginx -t
sudo systemctl restart nginx

sudo vim /etc/nginx/nginx.conf
change user from: user www-data; to: user root;
sudo systemctl restart nginx



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--------------------generating second deploy key- for django--------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  
  
  I then came across this solution using ~/.ssh/config. First, generate a second ssh key using ssh-keygen.

ssh-keygen -t rsa -f ~/.ssh/id_rsa_django
---------------------------------------------------------------------------------------

Start your ssh-agent with the following command:

 eval "$(ssh-agent -s)"
  
  ---------------------------------------------------------------------------------------
  And then add your newly generated private key identity to the authentication agent, ssh-agent.
  
  ssh-add ~/.ssh/id_rsa_django
  
    ---------------------------------------------------------------------------------------
  Now cat this public key and add it to your second GitHub repository deploy keys.
  
  cat ~/.ssh/id_rsa_django.pub
  
  ------------------------------------------------------------------------------------------
  Then, you need to add 2 hosts for GitHub using the key you just created and the key you created previously.
  
  cd ~/.ssh/config 
  ~/.ssh/config

# First host
Host react github.com
HostName github.com
IdentityFile ~/.ssh/id_rsa

# Second host
Host django github.com
HostName github.com
IdentityFile ~/.ssh/id_rsa_django
  
  
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--------------------setting up django---------------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


sudo apt update

sudo apt install python3 python3-pip
  
  ---------------------------------------------------------------------------------------
  ////create virtualenv
  
  sudo apt install python3.12-venv

  python3 -m venv venv
  source venv/bin/activate
  
  pip install -r requirements.txt
  pip freeze > requirements.txt


 
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 -------------------------------------nginx and supervisor--------------------------------------------------------------
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
sudo apt install nginx
sudo apt install supervisor

cd /etc/supervisor/conf.d/
sudo touch gunicorn.conf

sudo vim /etc/supervisor/conf.d/gunicorn.conf   

{

[program:gunicorn]
directory=/root/django/chessearn/chessearn_dj
command=/root/django/chessearn/venv/bin/gunicorn --workers 3 --bind unix:/root/django/chessearn/chessearn_dj/app.sock chessearn_dj.wsgi:application  
autostart=true
autorestart=true
stderr_logfile=/var/log/gunicorn/gunicorn.err.log
stdout_logfile=/var/log/gunicorn/gunicorn.out.log

[group:guni]
programs:gunicorn

}

cd /etc/systemd/system
vim gunicorn.service
{

[Unit]
Description=gunicorn daemon
Requires=gunicorn.socket
After=network.target

[Service]
User=root
Group=www-data
WorkingDirectory=/root/django/chessearn/chessearn_dj
ExecStart=/root/django/chessearn/venv/bin/gunicorn \
          --access-logfile - \
          --workers 3 \
          --bind unix:/run/gunicorn.sock \
          chessearn_dj.wsgi:application
[Install]
WantedBy=multi-user.target

}



sudo vim /etc/systemd/system/gunicorn.socket

{

[Unit]
Description=gunicorn socket

[Socket]
ListenStream=/run/gunicorn.sock

[Install]
WantedBy=sockets.target

}



sudo systemctl daemon-reload
sudo systemctl start gunicorn
sudo systemctl enable gunicorn
sudo systemctl status gunicorn





sudo mkdir /var/log/gunicorn
sudo supervisorctl reread
sudo supervisorctl update
sudo supervisorctl status

sudo vim /etc/nginx/nginx.conf

{
user root;
}

cd /etc/nginx/sites-available/
sudo touch django.conf
sudo vim django.conf

sudo vim /etc/nginx/sites-available/django.conf

{
______________________________

server{

	listen 8000;
	server_name 157.230.106.16;

	
	location / {

		include proxy_params;
		proxy_pass http://unix:/root/django/chessearn/chessearn_dj/app.sock;

	}

}


____________________________________
}


sudo nginx -t
sudo ln django.conf /etc/nginx/sites-enabled
sudo service nginx restart



  
  
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--------------------generating second deploy key- for nodejs--------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
I then came across this solution using ~/.ssh/config. First, generate a second ssh key using ssh-keygen.

ssh-keygen -t rsa -f ~/.ssh/id_rsa_nodejs
---------------------------------------------------------------------------------------

Start your ssh-agent with the following command:

 eval "$(ssh-agent -s)"
  
  ---------------------------------------------------------------------------------------
  And then add your newly generated private key identity to the authentication agent, ssh-agent.
  
  ssh-add ~/.ssh/id_rsa_nodejs
  
    ---------------------------------------------------------------------------------------
  Now cat this public key and add it to your second GitHub repository deploy keys.
  
  cat ~/.ssh/id_rsa_nodejs.pub
  
  ------------------------------------------------------------------------------------------
  Then, you need to add 2 hosts for GitHub using the key you just created and the key you created previously.
  
  cd ~/.ssh
  vim config

# First host
Host react github.com
HostName github.com
IdentityFile ~/.ssh/id_rsa

# Second host
Host django github.com
HostName github.com
IdentityFile ~/.ssh/id_rsa_django

# third host
Host node github.com
HostName github.com
IdentityFile ~/.ssh/id_rsa_nodejs
  
  
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-------------------setting nginx nodejs--------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  sudo vim /etc/nginx/sites-enabled/frontend_config
  
  server {
   listen         5001 default_server;
   listen         [::]:5001 default_server;
   server_name    157.230.106.16;
   root           /root/nodejs/express/server_chess;
location / {
       proxy_pass http://localhost:5001;
       proxy_http_version 1.1;
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection 'upgrade';
       proxy_set_header Host $host;
       proxy_cache_bypass $http_upgrade;
   }
}
  
  
  
  npm install -g pm2
  pm2 start index.js
  pm2 status

  
  sudo nginx -t
  sudo service nginx restart
  
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
------------------troubleshooting django--------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ps aux | grep gunicorn
sudo systemctl status nginx

sudo tail -f /var/log/nginx/access.log /var/log/nginx/error.log
ls -l /root/django/chessearn/chessearn_dj/app.sock
curl http://157.230.106.16:9000

sudo tail -f /var/log/nginx/error.log


[Unit]
Description=gunicorn daemon
After=network.target

[Service]
User=yourusername
Group=www-data
WorkingDirectory=/path/to/your/project
ExecStart=/path/to/your/virtualenv/bin/gunicorn --workers 3 --bind unix:/path/to/your/project/app.sock your_project.wsgi:application

[Install]
WantedBy=multi-user.target



sudo nano /etc/systemd/system/gunicorn.service

pip install gunicorn
which gunicorn

sudo systemctl daemon-reload
sudo systemctl start gunicorn
sudo systemctl enable gunicorn

sudo vim /etc/nginx/sites-enabled/frontend_config
  
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
------------------urls--------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         django
http://157.230.106.16:7000   
  
         express
http://157.230.106.16:5000        

          react
http://157.230.106.16:3000    
  
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
------------------postgres--------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////          

sudo apt install postgresql postgresql-contrib

sudo systemctl start postgresql
sudo systemctl enable postgresql

sudo -i -u postgres
psql




CREATE DATABASE seschessdb_local;
CREATE USER postgres WITH PASSWORD 'Esbon@0925';
ALTER ROLE postgres SET client_encoding TO 'utf8';
ALTER ROLE postgres SET default_transaction_isolation TO 'read committed';
ALTER ROLE postgres SET timezone TO 'UTC';
GRANT ALL PRIVILEGES ON DATABASE seschessdb_local TO postgres;

---------------------------------------------------------------------------------------
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
------------------postgres--------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  

git checkout -- chessearn_dj/chessearn_dj/settings.py
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
------------------postgres restoring the data base--------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  

sudo -i -u postgres
psql
\l
CREATE ROLE sesemailuser LOGIN PASSWORD 'Esbon@0925';
GRANT ALL PRIVILEGES ON DATABASE seschessdb_local TO sesemailuser;

DROP DATABASE IF EXISTS seschessdb_local;
CREATE DATABASE seschessdb_local;

pg_restore -U postgres -h localhost -p 5432 -d seschessdb_local /root/django/chessearn/chessearn_dj/backup.dump


\c seschessdb_local
\dt
SELECT * FROM user_user;

/////// others
sudo -u postgres psql -c 'DROP DATABASE IF EXISTS seschessdb_local;'
sudo -u postgres psql -c 'CREATE DATABASE seschessdb_local;'
sudo -u postgres pg_restore -U postgres -h localhost -p 5432 -d seschessdb_local /home/michael/Desktop/Cogito/company/chess/django_chess/chessearn_dj/backup.dump





 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-----------------changing key on git origin--------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 

 vim  ~/.ssh/config
 ssh -T git@github.com

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--------------------generating second deploy key- for admin react----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  
  
  I then came across this solution using ~/.ssh/config. First, generate a second ssh key using ssh-keygen.

ssh-keygen -t rsa -f ~/.ssh/id_rsa_admin
---------------------------------------------------------------------------------------

Start your ssh-agent with the following command:

 eval "$(ssh-agent -s)"
  
  ---------------------------------------------------------------------------------------
  And then add your newly generated private key identity to the authentication agent, ssh-agent.
  
  ssh-add ~/.ssh/id_rsa_admin
  
    ---------------------------------------------------------------------------------------
  Now cat this public key and add it to your second GitHub repository deploy keys.
  
  cat ~/.ssh/id_rsa_admin.pub
  
  ------------------------------------------------------------------------------------------
  Then, you need to add 2 hosts for GitHub using the key you just created and the key you created previously.
  
  vim ~/.ssh/config 
  

Host react github.com
HostName github.com
IdentityFile ~/.ssh/id_rsa

   ssh -T git@github.com
   
   
   //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--------------------setting admin react----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

   
sudo vim /etc/nginx/sites-enabled/frontend_config

server {
    listen 4000;
    server_name 157.230.106.16;
    root /root/admin/chessearn_admin/build/;
    index index.html; 
    location / {
        try_files $uri $uri/ /index.html;
    }
}

sudo nginx -t
sudo systemctl restart nginx


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--------------------http redirect----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


How to Set Up SSL with NGINX
sudo vim /etc/nginx/sites-enabled/default


       copying file
cp /etc/nginx/sites-enabled/default ~/unused/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--------------------certbot ssl----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

https://github.com/geekyshow1/GeekyShowsNotes/blob/main/nginx/SSL_Cert_Nginx.md

------------------Install Certbot and it’s Nginx plugin
sudo apt install certbot python3-certbot-nginx

------------------Verify Web Server Ports are Open and Allowed through Firewall
sudo ufw status verbose

---------------------Obtain an SSL certificate
sudo certbot --nginx -d your_domain.com -d www.your_domain.com

---------------------------Check Status of Certbot
sudo systemctl status certbot.timer

----------------------Dry Run SSL Renewal
sudo certbot renew --dry-run





---------------------------------------------------------trouble shooting nginx cofigs incase
sudo vim /etc/nginx/sites-available/chessearnexpressapi.online

server {
    listen 80;
    server_name chessearnexpressapi.online www.chessearnexpressapi.online;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name chessearnexpressapi.online www.chessearnexpressapi.online;

    ssl_certificate /etc/letsencrypt/live/chessearnexpressapi.online/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/chessearnexpressapi.online/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/chessearnexpressapi.online/chain.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    location / {
        proxy_pass http://localhost:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

sudo ln -s /etc/nginx/sites-available/chessearnexpressapi.online /etc/nginx/sites-enabled/

sudo systemctl reload nginx
sudo systemctl status certbot.timer



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-------------------- my urls----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chessearnexpressapi.online
chessearn.online
chessearndjangoapi.online

www.chessearnexpressapi.online
www.chessearn.online
www.chessearndjangoapi.online

https://chessearnexpressapi.online
https://chessearn.online
https://chessearndjangoapi.online

https://www.chessearnexpressapi.online
https://www.chessearn.online
https://www.chessearndjangoapi.online

http://chessearnexpressapi.online
http://chessearn.online
http://chessearndjangoapi.online

http://www.chessearnexpressapi.online
http://www.chessearn.online
http://www.chessearndjangoapi.online



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-------------------- chessearn.online ssl----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


sudo certbot --nginx -d chessearn.online -d www.chessearn.online

sudo vim /etc/nginx/sites-available/chessearn.online

server {
    listen 80;
    server_name chessearn.online www.chessearn.online;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name chessearn.online www.chessearn.online;

    ssl_certificate /etc/letsencrypt/live/chessearn.online/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/chessearn.online/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/chessearn.online/chain.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    location / {
        proxy_pass http://localhost:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

sudo ln -s /etc/nginx/sites-available/chessearn.online /etc/nginx/sites-enabled/

sudo nginx -t
sudo systemctl reload nginx
sudo systemctl status certbot.timer
sudo certbot renew --dry-run




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
--------------------chessearndjangoapi.online ssl----------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


sudo certbot --nginx -d chessearndjangoapi.online -d www.chessearndjangoapi.online

sudo vim /etc/nginx/sites-available/chessearndjangoapi.online

server {
    listen 80;
    server_name chessearndjangoapi.online www.chessearndjangoapi.online;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name chessearndjangoapi.online www.chessearndjangoapi.online;

    ssl_certificate /etc/letsencrypt/live/chessearndjangoapi.online/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/chessearndjangoapi.online/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/chessearndjangoapi.online/chain.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    location / {
        proxy_pass http://localhost:7000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

sudo ln -s /etc/nginx/sites-available/chessearndjangoapi.online /etc/nginx/sites-enabled/

sudo nginx -t
sudo systemctl reload nginx
sudo systemctl status certbot.timer
sudo certbot renew --dry-run

















